1674785409
waR3U4bTeM%3A81df7349fdc825e3697410c1d830ad6d-a70004db54a91273d823237ed746a9a8
s:7340:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImE3MDAwNGRiNTRhOTEyNzNkODIzMjM3ZWQ3NDZhOWE4IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTY6ImFib3V0UHJvamVjdC5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czoyOToiUHVibGljL1ZpZXdzL2Fib3V0UHJvamVjdC5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjQ1OTE6IjwhRE9DVFlQRSBodG1sPg0KPGh0bWwgbGFuZz0iZW4iPg0KPGhlYWQ+DQogIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4NCiAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPg0KICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii4vQXNzZXRzL2Nzcy9zdHlsZS5jc3MiPg0KICA8bGluayByZWw9Imljb24iIHR5cGU9ImltYWdlL3N2ZyIgaHJlZj0iPD89IElNR19QQVRIID8+L1RfbG9nby5zdmciIGFsdD0iZmF2aWNvbiBsb2dvIHNpbXBsaWZpw6kgZGUgVFBsYW5uZXIiLz4NCiAgPHRpdGxlPlRQTGFubmVyPC90aXRsZT4NCjwvaGVhZD4NCg0KPGJvZHk+DQoNCiAgPGhlYWRlcj4NCiAgICA8P3BocCByZXF1aXJlX29uY2UgJ2xheW91dC9oZWFkZXIucGhwJzsgPz4NCiAgPC9oZWFkZXI+DQoNCiAgPG1haW4+DQogIA0KICAgIDxzZWN0aW9uIGNsYXNzPSJwYXJhZ3JhcGhfY29udGFpbmVyIj4NCiAgICAgIDxkaXYgY2xhc3M9InBhcmFncmFwaCI+DQogICAgICAgIDwvYnI+DQogICAgICAgIDxoMT5BIFByb3BvcyBkdSBQcm9qZXQ8L2gxPg0KICAgICAgICAgIDxwPlBvdXIgbm91cyBjb250YWN0ZXIgOjwvcD4NCiAgICAgICAgICA8cD5Db2RlIDogUk9FU1MgVGhvbWFzIC0gPGEgaHJlZj0ibWFpbHRvOiB0aG9tYXNfcm9lc3NAaG90bWFpbC5mciI+dGhvbWFzX3JvZXNzQGhvdG1haWwuZnI8L2E+PC9wPg0KICAgICAgICAgIDxwPkRlc2lnbiA6IE5HQVUgRXBpcGhhbmllIC0gPGEgaHJlZj0ibWFpbHRvOiBucGkyMDUwLm9mZmljZUBnbWFpbC5jb20iPm5waTIwNTAub2ZmaWNlQGdtYWlsLmNvbTwvYT48L3A+DQogICAgICAgIDxoMj5TdWpldCBkdSBwcm9qZXQgbsKwMiA6IFRSRUxMTyBMSUtFPC9oMj4NCiAgICAgICAgICA8cD5VbmUgcsOpY2VudGUgc3RhcnR1cCB2ZXV0IGNyw6llciB1bmUgbm91dmVsbGUgcGxhdGVmb3JtZSBkZSBnZXN0aW9ubmFpcmUgZGUgdmVyc2lvbnMgdHlwZSBHSVQgYWRhcHTDqWUgw6AgdW4gcHVibGljDQogICAgICAgICAgICBwbHVzIGxhcmdlLiBJbHMgc291aGFpdGVudCBpbnTDqWdyZXIgbGV1ciBwcm9wcmUgc29sdXRpb24gS2FuYmFuLiBWb3VzIGF2ZXogZ2FnbsOpIGzigJlhcHBlbCBk4oCZb2ZmcmUgZXQgZGV2cmV6IGRvbmMNCiAgICAgICAgICAgIHLDqWFsaXNlciB1bmUgYXBwbGljYXRpb24gZGUgZ2VzdGlvbiBjb2xsYWJvcmF0aXZlIGRlIHRhYmxlYXUgS2FuYmFuLjwvcD4NCiAgICAgICAgICAgIDxwPklsIGRvaXQgc+KAmWFnaXIgZOKAmXVuIHNpdGUgcG91ciBjcsOpZXIgZXQgZ8OpcmVyIGRlcyB0YWJsZWF1eCBjb250ZW5hbnQgZGVzIGxpc3RlcyBjb250ZW5hbnQgZWxsZS1tw6ptZSBkZXMgY2FydGVzLg0KICAgICAgICAgICAgVm91cyBwb3V2ZXogdm9pciBldCBlc3NheWVyIHVuZSBhcHBsaWNhdGlvbiBzaW1pbGFpcmUgOiBUcmVsbG8sIGVuIHZvdXMgY3LDqWFudCB1biBjb21wdGUgZ3JhdHVpdGVtZW50IHN1ciBsZSBzaXRlDQogICAgICAgICAgICB0cmVsbG8uY29tLjwvcD4NCiAgICAgICAgICAgIDxwPkNlIFRyZWxsbyBMaWtlIGRldnJhIMOqdHJlIHBlbnPDqSBhdmVjIHNpbXBsaWNpdMOpLCDDqnRyZSBpbnR1aXRpZiBldCBvcHRpbWlzw6kgcG91ciB1biBnYWluIGRlIHRlbXBzLg0KICAgICAgICAgICAgVm91cyBkZXZleiB0cm91dmVyIHVuIG5vbSBkZSBtYXJxdWUsIHVuIGxvZ28gYWluc2kgcXXigJl1bmUgY2hhcnRlIGdyYXBoaXF1ZSBwb3VyIHZvdHJlIFRyZWxsbyBMaWtlLjwvcD4NCiAgICAgICAgICAgIDxwPkxlIHNpdGUgcGV1dCDDqnRyZSBlbiBGcmFuw6dhaXMsIG1haXMgdm91cyBkZXZleiB1dGlsaXNlciB1bmlxdWVtZW50IGzigJlhbmdsYWlzIGRhbnMgdm90cmUgY29kZSAoY29tbWVudGFpcmUsIG5vbQ0KICAgICAgICAgICAgZGUgZmljaGllciwgbm9tIGRlIGNsYXNzZSwg4oCmKS48L3A+DQogICAgICAgICAgICA8cD5MYSBzdGFjayB0ZWNobm9sb2dpcXVlIGVzdCBpbXBvc8OpIDogSFRNTC9DU1MvSlMgKyBQSFA8L3A+DQogICAgICAgICAgICA8cD5CaWVuIGVudGVuZHUgdm91cyBwb3V2ZXogbWV0dHJlIGVuIHBsYWNlIHVuZSBmb25jdGlvbiBkZSBwYXJ0YWdlIGRlcyB0YWJsZWF1eCBlbnRyZSB1dGlsaXNhdGV1cnMsIGFpbnNpIHF14oCZdW4NCiAgICAgICAgICAgIGVzcGFjZSBBZG1pbmlzdHJhdGV1ciBwb3V2YW50IHNlcnZpciDDoCBnw6lyZXIgbGVzIGNvbXB0ZXMgZGVzIHV0aWxpc2F0ZXVycyAoTGlzdGUgZGVzIHV0aWxpc2F0ZXVycywgdm9pciBsZXMgZMOpdGFpbHMNCiAgICAgICAgICAgIGTigJl1biB1dGlsaXNhdGV1ciBwcsOpY2lzLCBzdXBwcmltZXIgdW4gdXRpbGlzYXRldXIpLjwvcD4NCiAgICAgICAgICAgIDxwPlBvdXIgY2UgcHJvamV0IHZvdXMgdHJhdmFpbGxlcmV6IGVuIGdyb3VwZSBkZSAyIMOpdHVkaWFudHMgbWF4aW11bSwgdm91cyB2b3VzIHJlcGFydGlyZXogbGUgdHJhdmFpbCBsaWJyZW1lbnQNCiAgICAgICAgICAgIG1haXMgaWwgc2VyYSBleGlnw6kgdW4gdGVtcHMgZGUgcGFyb2xlIMOpcXVpdGFibGUgbG9ycyBkZSB2b3RyZSBwcsOpc2VudGF0aW9uIGRldmFudCBqdXJ5LjwvcD4NCiAgICAgICAgICAgIDxwPkzigJlvYmplY3RpZiBlc3QgZGUgY29uY2V2b2lyIHVuIHNpdGUgd2ViIHF1aSByw6lwb25kIGF1eCBhdHRlbnRlcyBzdWl2YW50ZXMgOjwvcD4NCiAgICAgICAgICAgIDxkaXY+QVRURU5URVMgVEVDSE5JUVVFUyA6DQogICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICA8bGk+TOKAmWFwcGxpY2F0aW9uIGRvaXQgY29udGVuaXIgOjwvbGk+DQogICAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgIDxsaT4xIHBhZ2UgZCdhY2N1ZWlsPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjEgb3UgKyBwYWdlL21vZGFsIGxvZ2luLCByZWdpc3RlciBldCByw6lpbml0aWFsaXNhdGlvbiBkZSBtb3QgZGUgcGFzc2U8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+MSBwYWdlIERhc2hib2FyZCBjb250ZW5hbnQgYXUgbW9pbnMgbCdhcGVyw6d1IGRlcyBUYWJsZWF1eCBlbiBjb3VycyAoS2FuYmFuKTwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT4xIG91ICsgcGFnZSBkZSBwcm9maWwgKHZvaXIgZXQgbW9kaWZpZXIpPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjEgcGFnZSBkeW5hbWlxdWUgY29udGVuYW50IGxlcyBUYWJsZWF1eCAoS2FuYmFuKTwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT5NaXNlIGVuIHBsYWNlIGR1IFNTTCBzdXIgbOKAmWVuc2VtYmxlIGRlIGzigJlhcHBzPC9saT4NCiAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgPGxpPkxhIGNoYXJ0ZSBncmFwaGlxdWUgZGUgbOKAmWFwcHMgY29udGVuYW50IGzigJllbnNlbWJsZSBkZXMgbG9nb3MgZXQgbWFxdWV0dGVzIHByw6l2dXM8L2xpPg0KICAgICAgICAgICAgICAgIDxsaT5NaXNlIGVuIHBsYWNlIGTigJl1biBHaXQgY29sbGFib3JhdGlmIGF2ZWMgdm90cmUgw6lxdWlwZTwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkNyw6lhdGlvbiBk4oCZdW4gT3V0aWxzIGRlIHN1aXZpIEFHSUxFIChvYmxpZ2F0b2lyZSkgYWRhcHTDqSBwb3VyIGxlIHByb2pldDwvbGk+DQogICAgICAgICAgICAgICAgPGxpPkxlcyBtZW50aW9ucyBvYmxpZ2F0b2lyZXMgZGUgZ2VzdGlvbiBkZSBwcm9qZXQgOjwvbGk+DQogICAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgIDxsaT5MZSBQcm9kdWN0IEJhY2tsb2c8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+TGEgbGlzdGUgZGVzIHTDomNoZXMgcGFyIG1lbWJyZSBk4oCZw6lxdWlwZTwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT5MZSBjYWxlbmRyaWVyIGRlIHByb2R1Y3Rpb24gKG91IEdhbnR0KTwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT5MYSBsaXN0ZXMgZGVzIHRlc3RzIHVuaXRhaXJlcyBwcsOpdnVzIHBvdXIgbGUgcHJvamV0PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPkxhIGxpc3RlcyBkZXMgVGVzdCBRQSBlZmZlY3R1w6kgcG91ciBsZSBwcm9qZXQ8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+TGEgbGlzdGUgZGVzIG1lc3VyZXMgcHJpc2VzIHBhciBs4oCZw6lxdWlwZSBwb3VyIGFzc3VyZXIgdW4gd29ya2Zsb3cgcmVndWxpZXI8L2xpPg0KICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPHA+TOKAmWFwcGxpY2F0aW9uIGRldnJhIMOqdHJlIGjDqWJlcmfDqWUgc3VyIGxlcyBzZXJ2ZXVycyBtaXMgw6Agdm90cmUgZGlzcG9zaXRpb24gKG91IHRvdXQgYXV0cmUgc2VydmV1ciBwZXJzb25uZWwpPC9wPg0KICAgICAgICAgIDwvYnI+DQogICAgICA8L2Rpdj4NCiAgICA8L3NlY3Rpb24+DQoNCiAgPC9tYWluPg0KDQogIDw/cGhwIHJlcXVpcmVfb25jZSAnbGF5b3V0L2Zvb3Rlci5waHAnOyA/Pg0KICA8c2NyaXB0IHNyYz0iPD89IEpTX1BBVEggPz4vZ2xvYmFsU2NyaXB0LmpzIj48L3NjcmlwdD4NCg0KPC9ib2R5Pg0KDQo8L2h0bWw+DQoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";